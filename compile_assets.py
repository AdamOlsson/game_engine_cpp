import subprocess
import os

SHADER_RESOURCE = "ShaderResource"
IMAGE_RESOURCE = "ImageResource"
FONT_RESOURCE = "FontResource"

class Asset:
    def __init__(self, filename, target_dir, outputfile, resource_type, resource_name, atlas_dims=None, char_dims=None):
        self.filename = filename
        self.target_dir = target_dir
        self.outputfile = outputfile
        self.resource_type = resource_type
        self.resource_name = resource_name
        if atlas_dims and char_dims:
            self.atlas_dims = atlas_dims
            self.char_dims = char_dims 

assets = [
    Asset("text_fragment.spv",
          "src/render_engine/shaders",
          "src/render_engine/resources/shaders/text_fragment/text_fragment.cpp",
          SHADER_RESOURCE,
          "TextFragment"),
    Asset("geometry_fragment.spv",
          "src/render_engine/shaders",
          "src/render_engine/resources/shaders/geometry_fragment/geometry_fragment.cpp",
          SHADER_RESOURCE,
          "GeometryFragment"),
    Asset("vert.spv",
          "src/render_engine/shaders",
          "src/render_engine/resources/shaders/vert/vert.cpp",
          SHADER_RESOURCE,
          "Vert"),
    Asset("default.png",
          "assets/fonts",
          "src/render_engine/resources/fonts/default/default.cpp",
          FONT_RESOURCE,
          "DefaultFont",
          atlas_dims=(512,512), char_dims=(64,64)),
    Asset("dog.jpeg",
          "assets/images",
          "src/render_engine/resources/images/dog/dog.cpp",
          IMAGE_RESOURCE,
          "DogImage"),
    Asset("ui_vertex.spv",
          "src/render_engine/shaders",
          "src/render_engine/resources/shaders/ui_vertex/ui_vertex.cpp",
          SHADER_RESOURCE,
          "UIVertex"),
    Asset("ui_fragment.spv",
          "src/render_engine/shaders",
          "src/render_engine/resources/shaders/ui_fragment/ui_fragment.cpp",
          SHADER_RESOURCE,
          "UIFragment"),
]

def xxd_to_include(filename, target_directory):
    """
    Run xxd -i command on the specified file and return the output.
    This converts a binary file to a C include file format.
    """
    original_directory = os.getcwd()
        
    if target_directory:
        os.chdir(target_directory)

    try:
        result = subprocess.run(['xxd', '-i', filename], 
                                capture_output=True, 
                                text=True, 
                                check=True)
        if target_directory:
            os.chdir(original_directory)

        return result.stdout
    except subprocess.CalledProcessError as e:
        return f"Error executing xxd: {e}"
    except FileNotFoundError:
        return "Error: xxd command not found. Make sure it's installed on your system."

file_template = """\
/// This file is auto generated by compile_asset.py
#include "{}.h"

const std::string resource_name = "{}";

{}
{}
"""
create_resource_template = """\
std::unique_ptr<{}> {}::create_resource() {{
    return {}Builder()
        .name(std::move(resource_name))
        .length({}_len)
        .bytes(&{}[0])
        .build();
}}
"""

create_font_resource_template = """\
std::unique_ptr<{}> {}::create_resource() {{
    return {}Builder()
        .name(std::move(resource_name))
        .length({}_len)
        .bytes(&{}[0])
        .atlas_width({})
        .atlas_height({})
        .char_width({})
        .char_height({})
        .build();
}}
"""

def compile_asset(asset):
    base_var_name = asset.filename.replace(".", "_")
    header_name = asset.filename.split(".")[0]
    file_content = xxd_to_include(asset.filename, asset.target_dir)
    if asset.resource_type == FONT_RESOURCE:
        create_resource_fn = create_font_resource_template.format(asset.resource_type, asset.resource_name, 
                                asset.resource_type, base_var_name, base_var_name,
                                asset.atlas_dims[0], asset.atlas_dims[1],
                                asset.char_dims[0], asset.char_dims[1])
    else:
        create_resource_fn = create_resource_template.format(asset.resource_type, asset.resource_name, 
                                asset.resource_type, base_var_name, base_var_name)
    complete_file = file_template.format(header_name, asset.resource_name, file_content, create_resource_fn)
    
    try:
        os.makedirs(os.path.dirname(asset.outputfile))
    except:
        pass

    with open(asset.outputfile, "w") as f:
        f.write(complete_file)

    print(f"Compiled asset {asset.filename}")

if __name__ == "__main__":
    for ass in assets:
        compile_asset(ass)
